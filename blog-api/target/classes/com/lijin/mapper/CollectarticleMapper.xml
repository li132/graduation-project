<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lijin.mapper.CollectarticleMapper" >
  <resultMap id="BaseResultMap" type="com.lijin.pojo.Collectarticle" >
    <result column="collect_id" property="collectId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="CollectResultMap" type="com.lijin.pojo.Collectarticle" >
    <result column="collect_id" property="collectId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />

    <association property="article" javaType="com.lijin.pojo.Article">
      <id column="id" property="id" jdbcType="INTEGER" />
      <result column="comment_counts" property="commentCounts" jdbcType="INTEGER" />
      <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
      <result column="summary" property="summary" jdbcType="VARCHAR" />
      <result column="title" property="title" jdbcType="VARCHAR" />
      <result column="view_counts" property="viewCounts" jdbcType="INTEGER" />
      <result column="weight" property="weight" jdbcType="INTEGER" />
      <result column="author_id" property="authorId" jdbcType="BIGINT" />
      <result column="body_id" property="bodyId" jdbcType="BIGINT" />
      <result column="category_id" property="categoryId" jdbcType="INTEGER" />
      <result column="love_counts" property="loveCounts" jdbcType="INTEGER" />
      <result column="collect_counts" property="collectCounts" jdbcType="INTEGER" />
      <result column="status" property="status" jdbcType="INTEGER" />
    </association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    collect_id, article_id, create_date
  </sql>
  <select id="selectByExample" resultMap="CollectResultMap" parameterType="com.lijin.pojo.CollectarticleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from collectarticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lijin.pojo.CollectarticleExample" >
    delete from collectarticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lijin.pojo.Collectarticle" >
    insert into collectarticle (collect_id, article_id, create_date
      )
    values (#{collectId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lijin.pojo.Collectarticle" >
    insert into collectarticle
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="collectId != null" >
        collect_id,
      </if>
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="collectId != null" >
        #{collectId,jdbcType=INTEGER},
      </if>
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lijin.pojo.CollectarticleExample" resultType="java.lang.Integer" >
    select count(*) from collectarticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update collectarticle
    <set >
      <if test="record.collectId != null" >
        collect_id = #{record.collectId,jdbcType=INTEGER},
      </if>
      <if test="record.articleId != null" >
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update collectarticle
    set collect_id = #{record.collectId,jdbcType=INTEGER},
      article_id = #{record.articleId,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="getByCollectId" parameterType="Integer" resultMap="CollectResultMap">
    select
    ca.*,a.*
    from collectarticle ca,article a
    <where>
      a.id=ca.article_id and ca.collect_id=#{value}
    </where>
  </select>
  <delete id="cancel" parameterType="map">
    delete from collectarticle
    <where>
      collect_id=#{collectId} and article_id=#{articleId}
    </where>
  </delete>
</mapper>