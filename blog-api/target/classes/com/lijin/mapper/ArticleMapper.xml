<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lijin.mapper.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.lijin.pojo.Article" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="comment_counts" property="commentCounts" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="summary" property="summary" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="view_counts" property="viewCounts" jdbcType="INTEGER" />
    <result column="weight" property="weight" jdbcType="INTEGER" />
    <result column="author_id" property="authorId" jdbcType="BIGINT" />
    <result column="body_id" property="bodyId" jdbcType="BIGINT" />
    <result column="category_id" property="categoryId" jdbcType="INTEGER" />
    <result column="love_counts" property="loveCounts" jdbcType="INTEGER" />
    <result column="collect_counts" property="collectCounts" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
    <resultMap id="ArticleResultMap" type="com.lijin.pojo.Article" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="comment_counts" property="commentCounts" jdbcType="INTEGER" />
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
        <result column="summary" property="summary" jdbcType="VARCHAR" />
        <result column="title" property="title" jdbcType="VARCHAR" />
        <result column="view_counts" property="viewCounts" jdbcType="INTEGER" />
        <result column="weight" property="weight" jdbcType="INTEGER" />
        <result column="author_id" property="authorId" jdbcType="BIGINT" />
        <result column="body_id" property="bodyId" jdbcType="BIGINT" />
        <result column="category_id" property="categoryId" jdbcType="INTEGER" />
        <result column="love_counts" property="loveCounts" jdbcType="INTEGER" />
        <result column="collect_counts" property="collectCounts" jdbcType="INTEGER" />
        <result column="status" property="status" jdbcType="INTEGER" />

        <association property="author" javaType="com.lijin.pojo.User">
            <id column="id" property="id" jdbcType="BIGINT" />
            <result column="account" property="account" jdbcType="VARCHAR" />
            <result column="admin" property="admin" jdbcType="BIT" />
            <result column="avatar" property="avatar" jdbcType="VARCHAR" />
            <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
            <result column="deleted" property="deleted" jdbcType="BIT" />
            <result column="email" property="email" jdbcType="VARCHAR" />
            <result column="last_login" property="lastLogin" jdbcType="TIMESTAMP" />
            <result column="mobile_phone_number" property="mobilePhoneNumber" jdbcType="VARCHAR" />
            <result column="nickname" property="nickname" jdbcType="VARCHAR" />
            <result column="password" property="password" jdbcType="VARCHAR" />
            <result column="salt" property="salt" jdbcType="VARCHAR" />
            <result column="status" property="status" jdbcType="VARCHAR" />
        </association>
        <association property="body" javaType="com.lijin.pojo.Articlebody">
            <result column="content" property="content" jdbcType="LONGVARCHAR" />
            <result column="content_html" property="contentHtml" jdbcType="LONGVARCHAR" />
        </association>
        <association property="category" javaType="com.lijin.pojo.Category">
            <id column="id" property="id" jdbcType="INTEGER" />
            <result column="avatar" property="avatar" jdbcType="VARCHAR" />
            <result column="categoryname" property="categoryname" jdbcType="VARCHAR" />
            <result column="description" property="description" jdbcType="VARCHAR" />
        </association>

    </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, comment_counts, create_date, summary, title, view_counts, weight, author_id, 
    body_id, category_id, love_counts, collect_counts, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lijin.pojo.ArticleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lijin.pojo.ArticleExample" >
    delete from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lijin.pojo.Article" >
    insert into article (id, comment_counts, create_date, 
      summary, title, view_counts, 
      weight, author_id, body_id, 
      category_id, love_counts, collect_counts, 
      status)
    values (#{id,jdbcType=INTEGER}, #{commentCounts,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{summary,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{viewCounts,jdbcType=INTEGER}, 
      #{weight,jdbcType=INTEGER}, #{authorId,jdbcType=BIGINT}, #{bodyId,jdbcType=BIGINT}, 
      #{categoryId,jdbcType=INTEGER}, #{loveCounts,jdbcType=INTEGER}, #{collectCounts,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lijin.pojo.Article" >
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="commentCounts != null" >
        comment_counts,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="summary != null" >
        summary,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="viewCounts != null" >
        view_counts,
      </if>
      <if test="weight != null" >
        weight,
      </if>
      <if test="authorId != null" >
        author_id,
      </if>
      <if test="bodyId != null" >
        body_id,
      </if>
      <if test="categoryId != null" >
        category_id,
      </if>
      <if test="loveCounts != null" >
        love_counts,
      </if>
      <if test="collectCounts != null" >
        collect_counts,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="commentCounts != null" >
        #{commentCounts,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="summary != null" >
        #{summary,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="viewCounts != null" >
        #{viewCounts,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="authorId != null" >
        #{authorId,jdbcType=BIGINT},
      </if>
      <if test="bodyId != null" >
        #{bodyId,jdbcType=BIGINT},
      </if>
      <if test="categoryId != null" >
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="loveCounts != null" >
        #{loveCounts,jdbcType=INTEGER},
      </if>
      <if test="collectCounts != null" >
        #{collectCounts,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lijin.pojo.ArticleExample" resultType="java.lang.Integer" >
    select count(*) from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update article
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.commentCounts != null" >
        comment_counts = #{record.commentCounts,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.summary != null" >
        summary = #{record.summary,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.viewCounts != null" >
        view_counts = #{record.viewCounts,jdbcType=INTEGER},
      </if>
      <if test="record.weight != null" >
        weight = #{record.weight,jdbcType=INTEGER},
      </if>
      <if test="record.authorId != null" >
        author_id = #{record.authorId,jdbcType=BIGINT},
      </if>
      <if test="record.bodyId != null" >
        body_id = #{record.bodyId,jdbcType=BIGINT},
      </if>
      <if test="record.categoryId != null" >
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.loveCounts != null" >
        love_counts = #{record.loveCounts,jdbcType=INTEGER},
      </if>
      <if test="record.collectCounts != null" >
        collect_counts = #{record.collectCounts,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update article
    set id = #{record.id,jdbcType=INTEGER},
      comment_counts = #{record.commentCounts,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      summary = #{record.summary,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      view_counts = #{record.viewCounts,jdbcType=INTEGER},
      weight = #{record.weight,jdbcType=INTEGER},
      author_id = #{record.authorId,jdbcType=BIGINT},
      body_id = #{record.bodyId,jdbcType=BIGINT},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      love_counts = #{record.loveCounts,jdbcType=INTEGER},
      collect_counts = #{record.collectCounts,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lijin.pojo.Article" >
    update article
    <set >
      <if test="commentCounts != null" >
        comment_counts = #{commentCounts,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="summary != null" >
        summary = #{summary,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="viewCounts != null" >
        view_counts = #{viewCounts,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="authorId != null" >
        author_id = #{authorId,jdbcType=BIGINT},
      </if>
      <if test="bodyId != null" >
        body_id = #{bodyId,jdbcType=BIGINT},
      </if>
      <if test="categoryId != null" >
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="loveCounts != null" >
        love_counts = #{loveCounts,jdbcType=INTEGER},
      </if>
      <if test="collectCounts != null" >
        collect_counts = #{collectCounts,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lijin.pojo.Article" >
    update article
    set comment_counts = #{commentCounts,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      summary = #{summary,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      view_counts = #{viewCounts,jdbcType=INTEGER},
      weight = #{weight,jdbcType=INTEGER},
      author_id = #{authorId,jdbcType=BIGINT},
      body_id = #{bodyId,jdbcType=BIGINT},
      category_id = #{categoryId,jdbcType=INTEGER},
      love_counts = #{loveCounts,jdbcType=INTEGER},
      collect_counts = #{collectCounts,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="listAllArticles" resultMap="ArticleResultMap" parameterType="com.lijin.vo.PageVo">
    select
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c
    <where>
      a.author_id=u.id and a.body_id=b.id and a.category_id=c.id
    </where>
    <if test="name != null">
      order by #{name}
    </if>
    <if test="pageNumber !=null and pageSize!=null">
      limit #{pageNumber},#{pageSize}
    </if>
  </select>
  <select id="listArticles" parameterType="Map" resultMap="ArticleResultMap">
    select distinct
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c,articletag t
    <where>
      a.author_id=u.id and a.body_id=b.id and a.category_id=c.id
      <if test="article.authorId != null">
        and a.author_id=#{article.authorId}
      </if>
      <if test="article.categoryId != null">
        and a.category_id = #{article.categoryId}
      </if>
      <if test="article.tagId != null">
        and a.id = t.article_id and t.tag_id = #{article.tagId}
      </if>
      <if test="article.year != null">
        and YEAR(a.create_date) = #{article.year}
      </if>
      <if test="article.month != null">
        and MONTH(a.create_date) = #{article.month}
      </if>
    </where>
      order by ${page.name}

    limit #{page.pageNumber},#{page.pageSize}
  </select>
  <select id="listArticlesByLike" parameterType="Map" resultMap="ArticleResultMap">
    select distinct
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c,articletag t,articlelike al
    <where>
      a.author_id=u.id and a.body_id=b.id and a.category_id=c.id
      <if test="article.userId != null">
        and a.id=al.article_id and al.user_id=#{article.userId}
      </if>
      <if test="article.authorId != null">
        and a.author_id=#{article.authorId}
      </if>
      <if test="article.categoryId != null">
        and a.category_id = #{article.categoryId}
      </if>
      <if test="article.tagId != null">
        and a.id = t.article_id and t.tag_id = #{article.tagId}
      </if>
      <if test="article.year != null">
        and YEAR(a.create_date) = #{article.year}
      </if>
      <if test="article.month != null">
        and MONTH(a.create_date) = #{article.month}
      </if>
    </where>
    <if test="page.name != null">
      order by ${page.name}
    </if>

      limit #{page.pageNumber},#{page.pageSize}

  </select>
  <select id="listArticlesByCollectId" parameterType="Map" resultMap="ArticleResultMap">
    select distinct
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c,articletag t,articlelike al,collectarticle ca
    <where>
      a.author_id=u.id and a.body_id=b.id and a.category_id=c.id
      <if test="article.collectId!=null">
        and ca.article_id = a.id and ca.collect_id=#{article.collectId}
      </if>
      <if test="article.userId != null">
        and a.id=al.article_id and al.user_id=#{article.userId}
      </if>
      <if test="article.authorId != null">
        and a.author_id=#{article.authorId}
      </if>
      <if test="article.categoryId != null">
        and a.category_id = #{article.categoryId}
      </if>
      <if test="article.tagId != null">
        and a.id = t.article_id and t.tag_id = #{article.tagId}
      </if>
      <if test="article.year != null">
        and YEAR(a.create_date) = #{article.year}
      </if>
      <if test="article.month != null">
        and MONTH(a.create_date) = #{article.month}
      </if>
    </where>
    <if test="page.name != null">
      order by ${page.name}
    </if>
    limit #{page.pageNumber},#{page.pageSize}
  </select>
  <select id="findByTags" parameterType="com.lijin.pojo.Tag" resultMap="BaseResultMap">
    select a.*
    from article a,articletag t
    <where>
      1 = 1
      <if test="id != null">
        and a.id = t.article_id and t.tag_id = #{id}
      </if>
    </where>
  </select>
  <select id="findByCategory" parameterType="com.lijin.pojo.Category" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from article
    <where>
      1 = 1
      <if test="id != null">
        and category_id = #{id}
      </if>
    </where>
  </select>
  <select id="findOrderByViewsAndLimit" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"/>
    from article
    order by view_counts desc
    limit 0,#{value}
  </select>
  <select id="findOrderByCreateDateAndLimit" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"/>
    from article
    order by create_date desc
    limit 0,#{value}
  </select>
  <select id="listArchives" resultType="com.lijin.vo.ArticleVo">
    select
    year(create_date) as year,
    month(create_date) as month,
    create_date as createDate,
    count(*) as count
    from article
    group by year(create_date),month(create_date)
  </select>
  <insert id="save" parameterType="com.lijin.pojo.Article" useGeneratedKeys="true" keyProperty="id">
    insert into article (id, comment_counts, create_date,
      summary, title, view_counts,
      weight, author_id, body_id,
      category_id, love_counts, collect_counts,
      status)
    values (#{id,jdbcType=INTEGER}, #{commentCounts,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP},
      #{summary,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{viewCounts,jdbcType=INTEGER},
      #{weight,jdbcType=INTEGER}, #{author.id,jdbcType=BIGINT}, #{body.id,jdbcType=BIGINT},
      #{category.id,jdbcType=INTEGER}, #{loveCounts,jdbcType=INTEGER}, #{collectCounts,jdbcType=INTEGER},
      #{status,jdbcType=INTEGER})
  </insert>
  <select id="selectByPrimaryKey" resultMap="ArticleResultMap" parameterType="java.lang.Integer" >
    select distinct
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c,articletag t
    <where>
    a.author_id=u.id and a.body_id=b.id and a.category_id=c.id and a.id=#{value}
    </where>
  </select>
  <select id="search" resultMap="ArticleResultMap" parameterType="map">
    select distinct
    a.*,u.*,b.*,c.*
    from article a,user u,articlebody b,category c,articletag t
    <where>
      a.author_id=u.id and a.body_id=b.id and a.category_id=c.id
      and (a.title like '%${search.word}%' or a.summary like '%${search.word}%')
      <if test="search.days!=null and search.days!=0">
        and date_sub(curdate(), interval #{search.days} day) &lt;= date(a.create_date)
      </if>
    </where>
      <if test="page.name != null ">
        order by ${page.name}
      </if>
      limit #{page.pageNumber},#{page.pageSize}
  </select>
  <update id="addCommentCounts" parameterType="com.lijin.pojo.Article">
    update article
    set comment_counts=#{commentCounts}
    where id =#{id}
  </update>
  <update id="updateLike" parameterType="com.lijin.pojo.Article">
    update article
    set love_counts=#{loveCounts}
    where id=#{id}
  </update>
  <update id="changeCollectcounts" parameterType="map">
    update article
    set collect_counts=collect_counts+#{i}
    <where>
      id=#{articleId}
    </where>
  </update>
  <select id="listAllArticlesByCollectId" parameterType="Integer" resultMap="BaseResultMap">
    select a.*
    from article a,collectarticle ca
    <where>
      ca.article_id=a.id and ca.collect_id=#{value}
    </where>
  </select>
</mapper>