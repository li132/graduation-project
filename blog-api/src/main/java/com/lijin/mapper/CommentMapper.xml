<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lijin.mapper.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.lijin.pojo.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="author_id" property="authorId" jdbcType="BIGINT" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="to_uid" property="toUid" jdbcType="BIGINT" />
    <result column="level" property="level" jdbcType="VARCHAR" />
    <result column="top" property="top" jdbcType="INTEGER" />
    <result column="likes" property="likes" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="CommentResultMap" type="com.lijin.pojo.Comment">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="author_id" property="authorId" jdbcType="BIGINT" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="to_uid" property="toUid" jdbcType="BIGINT" />
    <result column="level" property="level" jdbcType="VARCHAR" />
    <result column="top" property="top" jdbcType="INTEGER" />
    <result column="likes" property="likes" jdbcType="INTEGER" />

    <association property="author" javaType="com.lijin.pojo.User">
      <id column="id" property="id" jdbcType="BIGINT" />
      <result column="account" property="account" jdbcType="VARCHAR" />
      <result column="admin" property="admin" jdbcType="BIT" />
      <result column="avatar" property="avatar" jdbcType="VARCHAR" />
      <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
      <result column="deleted" property="deleted" jdbcType="BIT" />
      <result column="email" property="email" jdbcType="VARCHAR" />
      <result column="last_login" property="lastLogin" jdbcType="TIMESTAMP" />
      <result column="mobile_phone_number" property="mobilePhoneNumber" jdbcType="VARCHAR" />
      <result column="nickname" property="nickname" jdbcType="VARCHAR" />
      <result column="password" property="password" jdbcType="VARCHAR" />
      <result column="salt" property="salt" jdbcType="VARCHAR" />
      <result column="status" property="status" jdbcType="VARCHAR" />
    </association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, content, create_date, article_id, author_id, parent_id, to_uid, level, top, likes
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lijin.pojo.CommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lijin.pojo.CommentExample" >
    delete from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lijin.pojo.Comment" >
    insert into comment (id, content, create_date, 
      article_id, author_id, parent_id, 
      to_uid, level, top, likes
      )
    values (#{id,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{articleId,jdbcType=INTEGER}, #{authorId,jdbcType=BIGINT}, #{parentId,jdbcType=INTEGER}, 
      #{toUid,jdbcType=BIGINT}, #{level,jdbcType=VARCHAR}, #{top,jdbcType=INTEGER}, #{likes,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lijin.pojo.Comment" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="authorId != null" >
        author_id,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="toUid != null" >
        to_uid,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="top != null" >
        top,
      </if>
      <if test="likes != null" >
        likes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="authorId != null" >
        #{authorId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="toUid != null" >
        #{toUid,jdbcType=BIGINT},
      </if>
      <if test="level != null" >
        #{level,jdbcType=VARCHAR},
      </if>
      <if test="top != null" >
        #{top,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        #{likes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lijin.pojo.CommentExample" resultType="java.lang.Integer" >
    select count(*) from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update comment
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.articleId != null" >
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.authorId != null" >
        author_id = #{record.authorId,jdbcType=BIGINT},
      </if>
      <if test="record.parentId != null" >
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.toUid != null" >
        to_uid = #{record.toUid,jdbcType=BIGINT},
      </if>
      <if test="record.level != null" >
        level = #{record.level,jdbcType=VARCHAR},
      </if>
      <if test="record.top != null" >
        top = #{record.top,jdbcType=INTEGER},
      </if>
      <if test="record.likes != null" >
        likes = #{record.likes,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update comment
    set id = #{record.id,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      article_id = #{record.articleId,jdbcType=INTEGER},
      author_id = #{record.authorId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      to_uid = #{record.toUid,jdbcType=BIGINT},
      level = #{record.level,jdbcType=VARCHAR},
      top = #{record.top,jdbcType=INTEGER},
      likes = #{record.likes,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lijin.pojo.Comment" >
    update comment
    <set >
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="articleId != null" >
        article_id = #{articleId,jdbcType=INTEGER},
      </if>
      <if test="authorId != null" >
        author_id = #{authorId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="toUid != null" >
        to_uid = #{toUid,jdbcType=BIGINT},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=VARCHAR},
      </if>
      <if test="top != null" >
        top = #{top,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        likes = #{likes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lijin.pojo.Comment" >
    update comment
    set content = #{content,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      article_id = #{articleId,jdbcType=INTEGER},
      author_id = #{authorId,jdbcType=BIGINT},
      parent_id = #{parentId,jdbcType=INTEGER},
      to_uid = #{toUid,jdbcType=BIGINT},
      level = #{level,jdbcType=VARCHAR},
      top = #{top,jdbcType=INTEGER},
      likes = #{likes,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="save" parameterType="com.lijin.pojo.Comment" useGeneratedKeys="true" keyProperty="id">
    insert into comment (id, content, create_date,
      article_id, author_id, parent_id,
      to_uid, level, top, likes
      )
    values (#{id,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP},
      #{article.id,jdbcType=INTEGER}, #{author.id,jdbcType=BIGINT}, #{parent.id,jdbcType=INTEGER},
      #{toUser.id,jdbcType=BIGINT}, #{level,jdbcType=VARCHAR}, #{top,jdbcType=INTEGER}, #{likes,jdbcType=INTEGER}
      )
  </insert>
  <select id="findByArticleAndLevelOrderByCreateDateDesc" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from comment
    <where>
      1 = 1
      <if test="id != null">
        and article_id=#{id}
      </if>
      <if test="level != null">
        and level = #{level}
      </if>
    </where>
    order by create_date desc
  </select>
  <select id="findChildrens" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from comment
    <where>
      parent_id=#{value}
    </where>
  </select>
</mapper>